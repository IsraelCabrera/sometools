# Function to activate Python virtual environment
activate_venv() {
    local venv_dirs=("venv" ".venv" "env" ".env" "virtualenv")
    local activate_script="bin/activate"
    local found_venv=""
    
    # Detect OS and set appropriate activate script path
    case "$OSTYPE" in
        msys*|cygwin*)
            activate_script="Scripts/activate"
            ;;
        win32*)
            activate_script="Scripts/activate"
            ;;
    esac
    
    # Look for virtual environment in common directories
    for venv_dir in $venv_dirs; do
        if [[ -d "$venv_dir" && -f "$venv_dir/$activate_script" ]]; then
            found_venv="$venv_dir"
            break
        fi
    done
    
    # If no common directory found, look for any directory with activate script
    if [[ -z "$found_venv" ]]; then
        for dir in */; do
            if [[ -f "$dir/$activate_script" ]]; then
                found_venv="${dir%/}"
                break
            fi
        done
    fi
    
    if [[ -n "$found_venv" ]]; then
        echo "✅ Activating virtual environment: $found_venv"
        source "$found_venv/$activate_script"
        
        # Show Python info after activation
        if command -v python >/dev/null 2>&1; then
            echo "🐍 Python version: $(python --version 2>&1)"
            echo "📁 Python path: $(which python)"
        fi
        return 0
    else
        echo "❌ No virtual environment found"
        echo "💡 Common directories checked: ${venv_dirs[@]}"
        echo "💡 You can create one with: python -m venv venv"
        return 1
    fi
}

# Function to deactivate current virtual environment
deactivate_venv() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        echo "👋 Deactivating virtual environment: $(basename "$VIRTUAL_ENV")"
        deactivate
    else
        echo "❌ No virtual environment is currently active"
    fi
}

# Function to create and activate a new virtual environment
create_venv() {
    local venv_name="${1:-venv}"
    
    if [[ -d "$venv_name" ]]; then
        echo "⚠️ Virtual environment '$venv_name' already exists"
        read -q "REPLY?Do you want to recreate it? [y/N] "
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$venv_name"
        else
            activate_venv
            return
        fi
    fi
    
    echo "🚀 Creating virtual environment: $venv_name"
    python -m venv "$venv_name"
    
    if [[ $? -eq 0 ]]; then
        activate_venv
    else
        echo "❌ Failed to create virtual environment"
        return 1
    fi
}

venv() {
    # Main execution
    if [[ "$1" == "--deactivate" || "$1" == "-d" ]]; then
        deactivate_venv
    elif [[ "$1" == "--create" || "$1" == "-c" ]]; then
        create_venv "$2"
    elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo "🐍 Python Virtual Environment Manager"
        echo ""
        echo "Usage:"
        echo "  $0                    - Activate existing virtual environment"
        echo "  $0 -d, --deactivate   - Deactivate current virtual environment"
        echo "  $0 -c, --create [name]- Create and activate new virtual environment"
        echo "  $0 -h, --help         - Show this help message"
        echo ""
        echo "Common virtual environment directories: venv, .venv, env, .env, virtualenv"
    else
        activate_venv
    fi    
}
